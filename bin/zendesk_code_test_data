#!/usr/bin/env ruby

$LOAD_PATH.unshift(__dir__ + '/../lib')

require 'rubygems'
require 'optparse'
require 'code_test_data/cli'

require 'byebug'

USAGE = "Zendesk Code Test Data Generator
Usage:\tzendesk_code_test_data_generator <command> <opts>
Options:
  \t--trace\t\t trace mode on
  -l, --location\t file location
  -o, --orgs\t\t number of organisations
  -u, --users\t\t number of users
  -t, --tickets\t\t number of tickets
  -d, --distortion\t amount of distortion (in mangle operation)
  -h, --help\t\t print usage

Commands:
  generate\t\t generates code test data
  mangle\t\t mangles code test data into something unexpected
".freeze

OptionParser.new do |opts|
  opts.banner = USAGE
  opts.on('-l', '--location FILE')  { |location| @output_location = location }
  opts.on('-o', '--orgs INT')       { |oc| @org_count = oc.to_i }
  opts.on('-u', '--users INT')      { |uc| @user_count = uc.to_i }
  opts.on('-t', '--tickets INT')    { |tc| @ticket_count = tc.to_i }
  opts.on('-d', '--distortion INT') { |di| @distortion = di.to_i }
  opts.on('--trace') { @trace = true }
  opts.on_tail('-h', '--help') do
    CodeTestData::CLI.print_message_and_exit(USAGE)
  end
end.parse!

begin
  cmd = ARGV[0]
  CodeTestData::CLI::Commands.public_send(
    cmd.to_sym,
    [
      @output_location,
      @org_count,
      @user_count,
      @ticket_count,
      @distortion
    ]
  )

rescue StandardError => e
  CodeTestData::CLI.print_message(e)
  CodeTestData::CLI.print_message(e.backtrace) if @trace
  CodeTestData::CLI.print_message("\n")
  CodeTestData::CLI.print_message_and_exit(USAGE)
end

exit(0)
